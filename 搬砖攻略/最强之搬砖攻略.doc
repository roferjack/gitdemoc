1.JavaScript: 阮一峰js教程：https://wangdoc.com/
①ECMAScript:描述语言语法+基本对象
②DOM :处理HTML的接口和方法：Document、Element、Attrubute、Event
③BOM :处理浏览器的交互的接口和方法:Window、Navigater、Location、Screen、History
2.获取元素的方法： https://www.jb51.net/article/116460.htm
①通过ID获取（document.getElementById）  ：唯一的id，多个只会获取第一个
②通过name属性（document.getElementsByName）：一般是表单的name（类数组）
③通过标签名（document/Element.getElementsByTagName）：标签（类数组）
④通过类名（document/ Element.getElementsByClassName）：类名（类数组）>ie9
⑤获取html的方法（document.documentElement）：获取根元素html标签
⑥获取body的方法（document.body）:专门获取body这个标签
⑦通过选择器获取一个元素（document.querySelector）: 获取带有某个选择器的元素>ie7
⑧通过选择器获取一组元素（document.querySelectorAll）（类数组，静态nodelist）
Eg:var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
DOMapi小结：http://leafxm.com/2016/05/24/DOM_API/
3.mata标签的使用
定义：元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。标签位于文档的头部，不包含任何内容。<meta> 标签的属性定义了与文档相关联的名称/值对
① 属性及其值：http://www.w3school.com.cn/tags/tag_meta.asp  （name、http-equiv）
② 用途实例：https://blog.csdn.net/h330531987/article/details/70042511

③ ⑤⑥⑦⑧
5.处理String的方法
①字符串动态方法：返回字符串：str.chartAt(index) index是下标，返回下标字符，不改变原字符串。
返回字符串unicode编码：str.chartCodeAt(index) 返回下标unicode码，不改变原字符串。
index为字符串下标，取值为[0,str.length-1]
② 字符串静态方法：String.fromChartcode(num1,num2,...,numN);据Unicode编码返回字符串
操作方法：合并两个或多个字符串：str.concat(str1,str2,..strN)，不改变原字符串
③ 
　　　　　　　提取字符串：str.substring(start,stop)参数不接受负数，不改变原字符串
提取字符串的某个部分:str.slice(start,end)返回截取部分，不改变原字符串，参数可以为负数（数组也有此方法），兼容性很好。
不建议用：抽取从start下标开始的指定数目的字符：str.substr(start,length)start可为负数
复制字符串：str.repeat(count) 返回新的字符串，不改变原字符串，c41，f24，s9（兼容性差） count不能为负数，自动换整（es6新增）

④ 字符串位置的方法：
str.indexOf(searchvalue,fromindex) searchvalue必选，fromindex可选，                        默认从首字符0开始，没找到返回-1.
最后一次出现的位置，东西不存在返回-1       str.lastIndexOf(searchvalue,fromindex)
⑤ 确定一个字符串是否包含在另一个字符串中：（es6新增）返回值为布尔值
str.includes(searchvalue,fromindex)、从fromindex到尾部字符串 ie不支持
str .startsWith(searchvalue,fromindex)、从fromindex到尾部字符串
str.endsWith(searchvalue,stopindex) 前stopindex个字符串
⑥ 去字符串两端空格：str.trim()  >ie9
⑦ 字符串大小写转换：全部转小写str.toLowerCase()、全部转大写str.toUpperCase()
⑧ 字符串匹配方法：
在字符串内检索指定的值，或找到一个或多个正则表达式的匹配：
str.match(searchvalue/regexp)、可执行多次，加g，返回值为找到的字符或则null
检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串:
str.search(searchvalue/regexp)、忽略g，返回第一个匹配或者-1，忽略大小写加i
用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串，找到返回所在下标，没找到返回-1
Str.replace(regexp/substr,replacement)、 后者替换前者
⑨ 与数组的互转：
分割成数组str.split(separator,howmany)、separator:从指定字符或则正则开始分割，howmany分割的数目，多的不分，如果是””,则每个字符都分割
数组合成字符串Array.join(separator) separator指定分隔符，否则默认用逗号。
⑩ 检查字符是几个码点储存的：
Str.codePointAt()
For..of遍历
⑾字符串补全功能：
  头部补全 ：str.padStart(targetLength,padstring)、目标长度，填充的字符串
　尾部补全：str.padEnd(targetLength,padstring) 目标长度，填充的字符串

6.数组
  创建数组的两种方式：
（1） 使用Array构造函数：
       var arr1 = new Array(); //创建一个空数组
　　　　var arr2 = new Array(20); // 创建一个包含20项的数组
　　　　var arr3 = new Array("lily","lucy","Tom"); // 创建一个包含3个字符串的数组

（2） 使用数组的字面量表示法：
var arr4 = []; //创建一个空数组
var arr5 = [20]; // 创建一个包含1项的数组
var arr6 = ["lily","lucy","Tom"]; // 创建一个包含3个字符串的数组

  数组原型方法：
  
① 数组增删：
　　向数组的末尾添加一个或多个元素，并返回新的长度：
Array.push(newItem1, newItem2,.. newItemN) 改变原数组
数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项：
Array.pop() 改变原数组,无参数，删除最后一项
向数组的开头添加一个或更多元素，并返回新的长度：
Array.unshift(newItem1, newItem2,.. newItemN)  改变原数组，不支持ie
把数组的第一个元素从其中删除，并返回第一个元素的值：
Array.shift()改变原数组,无参数，删除第一项
② 数组排序：
Array.sort(sortby) 改变原数组，sortby可选，为排序的规则的函数
function sortby(a,b){
 return a-b(从小到大)/b-a(从大到小)
}

③ 数组反转
Array.reverse()改变原数组，无参数
④ 合并两个或多个数组
Array.concat(array1,array2,..arrayN)  不改变原数组
⑤ 从已有的数组中返回选定的元素   不改变原数组
Array.slice(start,end) start开始位置，必选，可为负值，end结束位置，可选，不改变原数组，返回截取的项  
⑥ 向/从数组中添加/删除项目，然后返回被删除的项目  改变原数组  
Array.splice(index,howmany,item1,item2,..itemN)（位置，删除项，添加项）
删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。
插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。
替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。
splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组
⑦ 判断数组项的唯一性
indexOf()和 lastIndexOf()
　　indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。 
lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。
　　这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回这1。在比较第一个参数与数组中的每一项时，会使用全等操作符

⑧ 遍历数组
Array.forEach()
　Eg: var array1 = ['a', 'b', 'c'];
　　array1.forEach(function(element) {
　　  console.log(element);
});
⑨ 对数组中的每一项运行给定函数
Array.map()
　　var arr = [1, 2, 3, 4, 5];
　　var arr2 = arr.map(function(item){
　　return item*item;
　　});
　　console.log(arr2); //[1, 4, 9, 16, 25]

⑩ 返回满足过滤条件组成的数组
Array.filter()
　　var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
　　var arr2 = arr.filter(function(x, index) {
　　return index % 3 === 0 || x >= 8;  （取模就是除以模数取余）
　　}); 
　　console.log(arr2); //[1, 4, 7, 8, 9, 10]

⑪ 判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true
Array.every()
　　var arr = [1, 2, 3, 4, 5];
　　var arr2 = arr.every(function(x) {
　　return x < 10;
　　}); 
　　console.log(arr2); //true
　　var arr3 = arr.every(function(x) {
　　return x < 3;
　　}); 
　　console.log(arr3); // false

⑫ 判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true
Array.some()
　　var arr = [1, 2, 3, 4, 5];
　　var arr2 = arr.some(function(x) {
　　return x < 3;
　　}); 
　　console.log(arr2); //true
　　var arr3 = arr.some(function(x) {
　　return x < 1;
　　}); 
　　console.log(arr3); // false

⑬ 迭代器
Array.reduce()，前一个值、当前值、项的索引和数组对象
Eg:初始值为10，从左到右相加
　　var values = [1,2,3,4,5];
　　var sum = values.reduceRight(function(prev, cur, index, array){
　　return prev + cur;
　　},10);
　　console.log(sum); //25

⑭ 迭代器(从右开始)
Array.reduceRight()

pop,push,reverse,shift,sort,splice,unshift 会改变原数组
join,concat,indexOf,lastIndexOf,slice,toString 不会改变原数组
map,filter,some,every,reduce,forEach这些迭代方法不会改变原数组
几个注意点：
1. shift,pop会返回那个被删除的元素
2. splice 会返回被删除元素组成的数组，或者为空数组
3. push 会返回新数组长度
4. some 在有true的时候停止
5. every 在有false的时候停

7.对象创建方法
①Object构造函数创建
   var Person = new Object();
　　Person.name = 'Nike';
　　Person.age = 29;
②使用对象字面量表示法
  var Person = {};//相当于var Person = new Object();
var Person = {
 name:'Nike';
 age:29;  
}
③使用工厂模式创建对象(通过函数封装起来，暴露属性，返回对象，但是不能判断是其类型)
  function createPerson(name,age,job){
　　var o = new Object();
　　o.name = name;
　　o.age = job;
　　o.sayName = function(){
　　  alert(this.name);
　　};
　　return o
}
　var person1 = createPerson(“nike”,29,”teacher”);
④使用构造函数创建对象(构造函数创建自己的属性，暴露属性，在通过new关键字创建实例出来，每个方法需在每个实例重新创建，耗内存)
 function Person(name,age,job){
   this.name = name;
   this.age = age;
　this.job = job;
this.sayName = function(){
alert(this.name);
}
}
Var person1 = new Person(“nick”,29,”teacher”)
⑤原型创建对象(直接在函数对象的原型上添加属性，再new一个实例出来，实例调用原型对象的属性和方法)
Function Person(){
Person.prototype.name = ‘Nike’;
Person.prototype.age = 20;
Person.prototype.job = ‘teacher’;
Person.prototype.sayName = function(){
Alert(this.name);
　};
}
Var person1 = new Person();
Person1.sayName();
⑥组合使用模式和原型模式(独立部分使用构造函数创建，公共部分在原型对象上定义，将原型对象的constructor属性指向构造函数)
Function Person(name,age,job){
this.name = name;
this.age = age;
this.job = job;

}
Person.prototype = {
constructor:Person,
sayName:function(){
alert(this.name)
}
}
Var person1 = new Person(“nick”,20,”teacher”)
8. 判断一个变量类型是数组还是对象
①通过instanceof来判断区分（前者原型链是否能找到后者的原型对象）
 用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置
②通过constructor
③通过toString()方法，数组原型和对象原型定义的toString()方法不同
大部分的对象都实现了自身的 toString 方法，这样就可能会导致 Object 的 toString 被终止查找，因此要用 call/apply 来强制调用Object 的 toString 方法。
9.Event loop
主线程（同步任务）--->任务队列（异步任务）{ 微任务->宏任务 }
10.require.js的用法
  请记住使用requirejs的口诀，两函数一配置一属性（直接复制百度就出来了）
11.vue相关
  安装：npm view vue-cli versions –json  查看vue-cli所以版本
12.promise对象https://yq.aliyun.com/articles/610350
https://segmentfault.com/a/1190000009478377?utm_source=tag-newest
1.它是个构造函数，创造promise实例后，它会立即执行，promise可以解决异步的问题，本身不能说promise是异步的
2.它接受一个函数作为参数，
然后这个参数函数也接受resolve，reject两个函数作为参数，
Resolve：异步操作执行成功后的回调函数
reject：异步操作执行失败后的回调函数
3.then()：
then中传了两个参数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调。所以我们能够分别拿到他们传过来的数据
4.catch()：
效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中。
5.All()：提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调
（谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象）
6.Race()：谁跑的快，以谁为准执行回调



JS字符串转换为JSON的四种方法笔记
http://www.aijquery.cn/Html/jqueryrumen/88.html
1、jQuery插件支持的转换方式： 
 
示例：
 $.parseJSON( jsonstr ); //jQuery.parseJSON(jsonstr),可以将json字符串转换成json对象 
 
2、浏览器支持的转换方式(Firefox，chrome，opera，safari，ie)等浏览器：
 
示例： 
JSON.parse(jsonstr); //可以将json字符串转换成json对象 
JSON.stringify(jsonobj); //可以将json对象转换成json对符串 
 
注：ie8(兼容模式),ie7和ie6没有JSON对象，推荐采用JSON官方的方式，引入json.js。 
 
3、Javascript支持的转换方式： 
eval('(' + jsonstr + ')'); //可以将json字符串转换成json对象,注意需要在json字符外包裹一对小括号 
 注：ie8(兼容模式),ie7和ie6也可以使用eval()将字符串转为JSON对象，但不推荐这些方式，这种方式不安全eval会执行json串中的表达式。 
 
4、JSON官方的转换方式： 
 
http://www.json.org/提供了一个json.js,这样ie8(兼容模式),ie7和ie6就可以支持JSON对象以及其stringify()和parse()方法； 
可以在https://github.com/douglascrockford/JSON-js上获取到这个js，一般现在用json2.js。






正则表达式：
https://zhuanlan.zhihu.com/p/29163295
1 . 校验密码强度
密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。
^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
2. 校验中文
字符串仅能是中文。
^[\\u4e00-\\u9fa5]{0,}$
3. 由数字、26个英文字母或下划线组成的字符串
^\\w+$
4. 校验E-Mail 地址
同密码一样，下面是E-mail地址合规性的正则检查语句。
[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?
5. 校验身份证号码
下面是身份证号码的正则校验。15 或 18位。
15位：
^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$
18位：
^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$
6. 校验日期
“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。
^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$
7. 校验金额
金额校验，精确到2位小数。
^[0-9]+(.[0-9]{2})?$
8. 校验手机号
下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）
^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$
9. 判断IE的版本
IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。
^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$
10. 校验IP-v4地址
IP4 正则语句。
\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b
11. 校验IP-v6地址
IP6 正则语句。
(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
12. 检查URL的前缀
应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。
if (!s.match(/^[a-zA-Z]+:\\/\\//))
{
    s = 'http://' + s;
}
13. 提取URL链接
下面的这个表达式可以筛选出一段文本中的URL。
^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&=]*)?
14. 文件路径及扩展名校验
验证windows下文件路径和扩展名（下面的例子中为.txt文件）
^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?"<>|]+\\.txt(l)?$
15. 提取Color Hex Codes
有时需要抽取网页中的颜色代码，可以使用下面的表达式。
^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
16. 提取网页图片
假若你想提取网页中所有图片信息，可以利用下面的表达式。
\\< *[img][^\\\\>]*[src] *= *[\\"\\']{0,1}([^\\"\\'\\ >]*)
17. 提取页面超链接
提取html中的超链接。
(<a\\s*(?!.*\\brel=)[^>]*)(href="https?:\\/\\/)((?!(?:(?:www\\.)?'.implode('|(?:www\\.)?', $follow_list).'))[^"]+)"((?!.*\\brel=)[^>]*)(?:[^>]*)>
18. 查找CSS属性
通过下面的表达式，可以搜索到相匹配的CSS属性。
^\\s*[a-zA-Z\\-]+\\s*[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}
19. 抽取注释
如果你需要移除HMTL中的注释，可以使用如下的表达式。
<!--(.*?)-->
20. 匹配HTML标签
通过下面的表达式可以匹配出HTML中的标签属性。
<\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:".*?"|'.*?'|[\\^'">\\s]+))?)+\\s*|\\s*)\\/?>

常用正则表达式
用户名
/^[a-z0-9_-]{3,16}$/
密码
/^[a-z0-9_-]{6,18}$/
十六进制值
/^#?([a-f0-9]{6}|[a-f0-9]{3})$/
电子邮箱
/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/
/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/
URL
/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/
IP 地址
/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/
/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
HTML 标签
/^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/
删除代码\\注释
(?<!http:|\S)//.*$
Unicode编码中的汉字范围
/^[\u2E80-\u9FFF]+$/





一、校验数字的表达式
 1 数字：^[0-9]*$
 2 n位的数字：^\d{n}$
 3 至少n位的数字：^\d{n,}$
 4 m-n位的数字：^\d{m,n}$
 5 零和非零开头的数字：^(0|[1-9][0-9]*)$
 6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$
 7 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$
 8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$
 9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
11 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$
12 非零的负整数：^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$
13 非负整数：^\d+$ 或 ^[1-9]\d*|0$
14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$
15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
二、校验字符的表达式
 1 汉字：^[\u4e00-\u9fa5]{0,}$
 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
 3 长度为3-20的所有字符：^.{3,20}$
 4 由26个英文字母组成的字符串：^[A-Za-z]+$
 5 由26个大写英文字母组成的字符串：^[A-Z]+$
 6 由26个小写英文字母组成的字符串：^[a-z]+$
 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
 8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$
 9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$
10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
11 可以输入含有^%&',;=?$\"等字符：[^%&',;=?$\x22]+
12 禁止输入含有~的字符：[^~\x22]+
三、特殊需求表达式
 1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?
 3 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$
 4 手机号码：^(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])\d{8}$ (由于工信部放号段不定时，所以建议使用泛解析 ^([1][3,4,5,6,7,8,9])\d{9}$)
 5 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$ 
 6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7} 
 7 18位身份证号码(数字、字母x结尾)：^((\d{18})|([0-9x]{18})|([0-9X]{18}))$
 8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
 9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$
10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$  
11 日期格式：^\d{4}-\d{1,2}-\d{1,2}
12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$
13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 
14 钱的输入格式：
15    1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[1-9][0-9]*$ 
16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 
17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 
18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 
19    5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]{2})?$ 
20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ 
21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ 
22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ 
23    备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里
24 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
25 中文字符的正则表达式：[\u4e00-\u9fa5]
26 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)
28 HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? />    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)
29 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
30 腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)
31 中国邮政编码：[1-9]\d{5}(?!\d)    (中国邮政编码为6位数字)
32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)
33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))


















vue2.0提供了一个keep-alive组件用来缓存组件,避免多次加载相应的组件,减少性能消耗,keep-alive 是Vue的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM。结合vue-router中使用，可以缓存某个view的整个内容。
https://www.jb51.net/article/131110.htm
一般有这样的需求，当我们第一次进入列表页需要请求一下数据，当我从列表页进入详情页，详情页不缓存也需要请求下数据，然后返回列表页
有两个情况：
1. 直接点击浏览器的后退返回按钮。
2. 点击导航栏中的 /list的链接返回。
那么针对第一种情况下，我们直接通过后退按钮时，返回到列表页(/list) 是不需要请求数据。
针对第二种情况下，我们通过链接返回到列表页是需要请求数据。



